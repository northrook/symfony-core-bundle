<?php

declare( strict_types = 1 );

namespace Northrook\Symfony\Core;

use Northrook\Support\File;
use function Northrook\Core\Function\normalizePath;

/**
 * @internal
 * @author Martin Nielsen <mn@northrook.com>
 */
final class AutoConfigure
{

    private readonly string $configDirectory;
    private array           $existingConfig = [];

    public function __construct(
        private readonly string $projectDirectory,
    ) {
        $this->configDirectory = normalizePath( $this->projectDirectory . '/config' );

        if ( 'cli' === PHP_SAPI ) {
            echo 'AutoConfigure called by ' . SymfonyCoreBundle::class . PHP_EOL;
        }
        else {
            // AutoConfigure should only be called by CLI or when SymfonyCoreBundle is building the container.
            die;
        }
    }

    public function configPreload() : self {


        $preloadPhp = $this->configDirectory . DIRECTORY_SEPARATOR . 'preload.php';

        File::save(
            $preloadPhp,
            <<<PHP
                <?php

                // Generated by Northrook\Symfony\Core\AutoConfigure

                if ( file_exists( dirname( __DIR__ ) . '/var/cache/prod/App_KernelProdContainer.preload.php' ) ) {
                    opcache_compile_file( dirname( __DIR__ ) . '/var/cache/prod/App_KernelProdContainer.preload.php' );
                }
                PHP,
        );


        return $this;
    }

    public function configRoutes() : self {

        $routesYaml = $this->configDirectory . DIRECTORY_SEPARATOR . 'routes.yaml';
        $routesPhp  = $this->configDirectory . DIRECTORY_SEPARATOR . 'routes.php';

        if ( File::exists( $routesYaml ) ) {
            $this->existingConfig[ 'routes.yaml' ] = File::read( $routesYaml );
            File::remove( $routesYaml );
            echo "AutoConfigure removed routes.yaml." . PHP_EOL;
        }

        File::save(
            $routesPhp,
            <<<PHP
                <?php
                
                // Generated by Northrook\Symfony\Core\AutoConfigure
                
                declare( strict_types = 1 );
                
                use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

                return static function ( RoutingConfigurator \$routes ) : void {
                    \$routes->import(
                        [
                            'path'      => '../src/Controller/',
                            'namespace' => 'App\Controller',
                        ],
                        'attribute',
                    );
                };
                PHP,
        );

        echo "AutoConfigure generated config/routes.php." . PHP_EOL;

        return $this;
    }
}